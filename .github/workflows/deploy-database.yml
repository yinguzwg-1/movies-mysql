name: 🚀 数据库部署到阿里云

on:
  push:
    branches: [ main, master ]
    paths:
      - 'database.sql'
      - '.github/workflows/deploy-database.yml'
  workflow_dispatch:
    inputs:
      database_file:
        description: '数据库文件路径'
        required: true
        default: 'database.sql'

jobs:
  deploy-database:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🔍 检查数据库文件
      run: |
        DB_FILE="${{ github.event.inputs.database_file || 'database.sql' }}"
        if [ ! -f "$DB_FILE" ]; then
          echo "❌ 数据库文件不存在: $DB_FILE"
          exit 1
        fi
        echo "✅ 找到数据库文件: $DB_FILE"
        ls -la "$DB_FILE"

    - name: 🚀 部署到阿里云服务器
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        key: ${{ secrets.ALIYUN_SSH_KEY }}
        port: ${{ secrets.ALIYUN_PORT || '22' }}
        command_timeout: "600s"
        script: |
          echo "🚀 开始部署数据库到阿里云服务器..."
          echo "📦 数据库文件: ${{ github.event.inputs.database_file || 'database.sql' }}"
          echo "🔍 调试信息开始 ========================"
          echo "数据库名称: '${{ secrets.DB_NAME }}'"
          echo "数据库用户: '${{ secrets.DB_USER }}'"
          echo "数据库密码长度: ${#DB_PASSWORD} 字符"
          echo "=========================================="
          
          DB_NAME="${{ secrets.DB_NAME }}"
          
          # 检查 MySQL 是否安装
          if ! command -v mysql &> /dev/null; then
            echo "📦 安装 MySQL..."
            sudo apt-get update
            sudo apt-get install -y mysql-server
            sudo systemctl start mysql
            sudo systemctl enable mysql
          else
            echo "✅ MySQL 已安装"
            sudo systemctl start mysql || true
          fi
          
          # 检查 MySQL 服务状态
          echo "🔍 MySQL 服务状态:"
          sudo systemctl status mysql --no-pager -l
          
          # 创建数据库用户（如果不存在）
          echo "🔧 配置数据库用户..."
          sudo mysql -e "CREATE USER IF NOT EXISTS '${{ secrets.DB_USER }}'@'localhost' IDENTIFIED BY '${{ secrets.DB_PASSWORD }}';" || true
          sudo mysql -e "GRANT ALL PRIVILEGES ON *.* TO '${{ secrets.DB_USER }}'@'localhost' WITH GRANT OPTION;" || true
          sudo mysql -e "FLUSH PRIVILEGES;" || true
          
          # 创建数据库（如果不存在）
          echo "📊 创建数据库..."
          sudo mysql -e "CREATE DATABASE IF NOT EXISTS \`$DB_NAME\`;" || true
          
          # 显示所有数据库
          echo "🔍 当前所有数据库:"
          sudo mysql -e "SHOW DATABASES;"
          
          # 创建配置文件来避免密码在命令行中显示
          MYSQL_CNF="/tmp/mysql.cnf"
          cat > "$MYSQL_CNF" << EOF
          [client]
          user=${{ secrets.DB_USER }}
          password=${{ secrets.DB_PASSWORD }}
          host=localhost
          port=3306
          EOF
          
          echo "🔍 配置文件内容（隐藏密码）:"
          cat "$MYSQL_CNF" | sed 's/password=.*/password=***HIDDEN***/'
          
          # 设置配置文件权限
          chmod 600 "$MYSQL_CNF"
          
          # 测试数据库连接
          echo "🔍 测试数据库连接..."
          if sudo mysql --defaults-extra-file="$MYSQL_CNF" -e "SELECT 1;" > /dev/null 2>&1; then
            echo "✅ 数据库连接成功"
          else
            echo "❌ 数据库连接失败"
            echo "🔍 尝试显示错误信息:"
            sudo mysql --defaults-extra-file="$MYSQL_CNF" -e "SELECT 1;" 2>&1
            rm -f "$MYSQL_CNF"
            exit 1
          fi
          
          # 备份现有数据库（如果存在）
          echo "📦 备份现有数据库..."
          BACKUP_FILE="/tmp/backup_$DB_NAME_$(date +%Y%m%d_%H%M%S).sql"
          sudo mysqldump --defaults-extra-file="$MYSQL_CNF" \`$DB_NAME\` > "$BACKUP_FILE" 2>/dev/null || echo "⚠️ 备份失败或数据库为空"
          
          # 删除现有数据库内容
          echo "🗑️ 清空现有数据库..."
          sudo mysql --defaults-extra-file="$MYSQL_CNF" -e "DROP DATABASE IF EXISTS \`$DB_NAME\`;"
          sudo mysql --defaults-extra-file="$MYSQL_CNF" -e "CREATE DATABASE \`$DB_NAME\`;"
          
          # 清理配置文件
          rm -f "$MYSQL_CNF"
          
          echo "✅ 数据库准备完成"
          echo "🔍 调试信息结束 ========================"

    - name: 📤 上传数据库文件
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        key: ${{ secrets.ALIYUN_SSH_KEY }}
        port: ${{ secrets.ALIYUN_PORT || '22' }}
        source: "${{ github.event.inputs.database_file || 'database.sql' }}"
        target: "/tmp/"

    - name: 🔄 导入数据库
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        key: ${{ secrets.ALIYUN_SSH_KEY }}
        port: ${{ secrets.ALIYUN_PORT || '22' }}
        command_timeout: "600s"
        script: |
          echo "📥 导入数据库..."
          echo "🔍 调试信息开始 ========================"
          echo "数据库文件: /tmp/${{ github.event.inputs.database_file || 'database.sql' }}"
          echo "数据库名称: '${{ secrets.DB_NAME }}'"
          echo "数据库用户: '${{ secrets.DB_USER }}'"
          echo "数据库密码长度: ${#DB_PASSWORD} 字符"
          echo "=========================================="
          
          DB_FILE="/tmp/${{ github.event.inputs.database_file || 'database.sql' }}"
          DB_NAME="${{ secrets.DB_NAME }}"
          
          # 检查文件是否存在
          if [ ! -f "$DB_FILE" ]; then
            echo "❌ 数据库文件不存在: $DB_FILE"
            exit 1
          fi
          
          echo "✅ 数据库文件存在，大小: $(ls -lh "$DB_FILE" | awk '{print $5}')"
          
          # 创建配置文件来避免密码在命令行中显示
          MYSQL_CNF="/tmp/mysql.cnf"
          cat > "$MYSQL_CNF" << EOF
          [client]
          user=${{ secrets.DB_USER }}
          password=${{ secrets.DB_PASSWORD }}
          host=localhost
          port=3306
          EOF
          
          echo "🔍 配置文件内容（隐藏密码）:"
          cat "$MYSQL_CNF" | sed 's/password=.*/password=***HIDDEN***/'
          
          # 设置配置文件权限
          chmod 600 "$MYSQL_CNF"
          echo "✅ 配置文件权限设置完成"
          
          # 测试数据库连接
          echo "🔍 测试数据库连接..."
          if sudo mysql --defaults-extra-file="$MYSQL_CNF" -e "SELECT 1;" > /dev/null 2>&1; then
            echo "✅ 数据库连接成功"
          else
            echo "❌ 数据库连接失败"
            echo "🔍 尝试显示错误信息:"
            sudo mysql --defaults-extra-file="$MYSQL_CNF" -e "SELECT 1;" 2>&1
            rm -f "$MYSQL_CNF"
            exit 1
          fi
          
          # 检查数据库是否存在
          echo "🔍 检查数据库是否存在..."
          DB_EXISTS=$(sudo mysql --defaults-extra-file="$MYSQL_CNF" -e "SHOW DATABASES LIKE '$DB_NAME';" 2>/dev/null | wc -l)
          if [ "$DB_EXISTS" -gt 1 ]; then
            echo "✅ 数据库 '$DB_NAME' 已存在"
          else
            echo "⚠️ 数据库 '$DB_NAME' 不存在，将创建"
            sudo mysql --defaults-extra-file="$MYSQL_CNF" -e "CREATE DATABASE \`$DB_NAME\`;"
          fi
          
          # 显示所有数据库
          echo "🔍 当前所有数据库:"
          sudo mysql --defaults-extra-file="$MYSQL_CNF" -e "SHOW DATABASES;"
          
          # 方法1：先切换到数据库，再导入
          echo "📥 方法1：先切换到数据库 '$DB_NAME'，再导入..."
          sudo mysql --defaults-extra-file="$MYSQL_CNF" -e "USE \`$DB_NAME\`; source $DB_FILE;"
          
          if [ $? -eq 0 ]; then
            echo "✅ 数据库导入成功！"
          else
            echo "❌ 方法1失败，尝试方法2..."
            
            # 方法2：直接指定数据库导入
            echo "📥 方法2：直接指定数据库 '$DB_NAME' 导入..."
            sudo mysql --defaults-extra-file="$MYSQL_CNF" \`$DB_NAME\` < "$DB_FILE"
            
            if [ $? -eq 0 ]; then
              echo "✅ 数据库导入成功！"
            else
              echo "❌ 方法2也失败，尝试方法3..."
              
              # 方法3：创建临时SQL文件，包含USE语句
              echo "📥 方法3：创建包含USE语句的临时文件..."
              TEMP_SQL="/tmp/temp_import.sql"
              echo "USE \`$DB_NAME\`;" > "$TEMP_SQL"
              cat "$DB_FILE" >> "$TEMP_SQL"
              
              sudo mysql --defaults-extra-file="$MYSQL_CNF" < "$TEMP_SQL"
              
              if [ $? -eq 0 ]; then
                echo "✅ 数据库导入成功！"
                rm -f "$TEMP_SQL"
              else
                echo "❌ 所有方法都失败了"
                echo "🔍 导入错误详情:"
                sudo mysql --defaults-extra-file="$MYSQL_CNF" < "$TEMP_SQL" 2>&1
                rm -f "$TEMP_SQL" "$MYSQL_CNF"
                exit 1
              fi
            fi
          fi
          
          # 验证导入结果
          echo "🔍 验证数据库..."
          TABLE_COUNT=$(sudo mysql --defaults-extra-file="$MYSQL_CNF" -e "USE \`$DB_NAME\`; SHOW TABLES;" | wc -l)
          echo "📊 数据库表数量: $((TABLE_COUNT - 1))"
          
          echo "🔍 数据库中的表:"
          sudo mysql --defaults-extra-file="$MYSQL_CNF" -e "USE \`$DB_NAME\`; SHOW TABLES;"
          
          # 清理临时文件
          rm -f "$DB_FILE" "$MYSQL_CNF"
          
          echo "🎉 数据库部署完成！"
          echo "🌐 数据库地址: ${{ secrets.ALIYUN_HOST }}:3306"
          echo "📊 数据库名称: $DB_NAME"
          echo "🔍 调试信息结束 ========================"

    - name: 🔄 重启应用
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        key: ${{ secrets.ALIYUN_SSH_KEY }}
        port: ${{ secrets.ALIYUN_PORT || '22' }}
        script: |
          echo "🔄 检查是否需要重启应用..."
          
          # 检查是否有应用需要重启
          if command -v pm2 &> /dev/null; then
            echo "🔄 重启 PM2 应用..."
            pm2 restart all || echo "PM2 重启失败或无应用运行"
          fi
          
          if command -v docker-compose &> /dev/null || command -v docker &> /dev/null; then
            echo "🔄 重启 Docker 容器..."
            docker-compose restart 2>/dev/null || docker compose restart 2>/dev/null || echo "Docker Compose 重启失败或无容器运行"
          fi
          
          echo "✅ 应用重启检查完成" 