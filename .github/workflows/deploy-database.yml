name: 🚀 数据库增量部署到阿里云

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - '.github/workflows/deploy-database.yml'
      - '.env'
  workflow_dispatch:
    inputs:
      auto_execute:
        description: '是否自动执行部署'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      output_file:
        description: '输出SQL文件路径（可选）'
        required: false
        default: ''

jobs:
  deploy-database:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🟢 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 安装依赖
      run: npm install

    - name: 🔍 检查部署配置
      run: |
        AUTO_EXECUTE="${{ github.event.inputs.auto_execute || 'true' }}"
        OUTPUT_FILE="${{ github.event.inputs.output_file || '' }}"
        
        echo "🚀 增量部署配置:"
        echo "📤 自动执行: $AUTO_EXECUTE"
        if [ -n "$OUTPUT_FILE" ]; then
          echo "📥 输出文件: $OUTPUT_FILE"
        fi

    - name: 🚀 部署到阿里云服务器
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        key: ${{ secrets.ALIYUN_SSH_KEY }}
        port: ${{ secrets.ALIYUN_PORT || '22' }}
        command_timeout: "600s"
        script: |
          echo "🚀 开始增量部署数据库到阿里云服务器..."
          
          # 检查 Node.js 是否安装
          if ! command -v node &> /dev/null; then
            echo "📦 安装 Node.js..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
          else
            echo "✅ Node.js 已安装: $(node --version)"
          fi
          
          # 检查 MySQL 是否安装
          if ! command -v mysql &> /dev/null; then
            echo "📦 安装 MySQL..."
            sudo apt-get update
            sudo apt-get install -y mysql-server
            sudo systemctl start mysql
            sudo systemctl enable mysql
          else
            echo "✅ MySQL 已安装"
            sudo systemctl start mysql || true
          fi
          
          # 检查 MySQL 服务状态
          echo "🔍 MySQL 服务状态:"
          sudo systemctl status mysql --no-pager -l
          
          echo "✅ 服务器环境准备完成"

    - name: 📤 上传项目文件
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        key: ${{ secrets.ALIYUN_SSH_KEY }}
        port: ${{ secrets.ALIYUN_PORT || '22' }}
        source: "./"
        target: "/tmp/"

    - name: 🔄 执行部署
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        key: ${{ secrets.ALIYUN_SSH_KEY }}
        port: ${{ secrets.ALIYUN_PORT || '22' }}
        command_timeout: "600s"
        script: |
          echo "🔄 执行增量部署..."
          
          AUTO_EXECUTE="${{ github.event.inputs.auto_execute || 'true' }}"
          OUTPUT_FILE="${{ github.event.inputs.output_file || '' }}"
          
          # 进入项目目录
          cd /tmp
          
          # 安装依赖
          echo "📦 安装项目依赖..."
          npm install
          
          # 使用项目中的.env文件配置
          echo "🔍 使用项目.env文件配置"
          
          # 检查.env文件是否存在
          if [ -f ".env" ]; then
            echo "✅ 找到.env文件，使用项目配置"
            # 加载.env文件中的环境变量
            export $(cat .env | grep -v '^#' | xargs)
          else
            echo "⚠️  未找到.env文件，使用默认配置"
            # 使用Secrets作为备用（如果配置了的话）
            export DB_HOST="${{ secrets.DB_HOST || 'localhost' }}"
            export DB_USER="${{ secrets.DB_USER || 'root' }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD || '' }}"
            export DB_NAME="${{ secrets.DB_NAME || 'nest_db' }}"
            export DB_PORT="${{ secrets.DB_PORT || '3306' }}"
          fi
          
          echo "🔍 环境变量检查:"
          echo "   DB_HOST: $DB_HOST"
          echo "   DB_USER: $DB_USER"
          echo "   DB_PASSWORD: $DB_PASSWORD"
          echo "   DB_NAME: $DB_NAME"
          echo "   DB_PORT: $DB_PORT"
          
          # 构建部署命令
          DEPLOY_CMD="node src/incremental-deploy.js"
          
          if [ "$AUTO_EXECUTE" = "true" ]; then
            DEPLOY_CMD="$DEPLOY_CMD --execute"
          fi
          
          if [ -n "$OUTPUT_FILE" ]; then
            DEPLOY_CMD="$DEPLOY_CMD -o $OUTPUT_FILE"
          fi
          
          echo "🚀 执行命令: $DEPLOY_CMD"
          $DEPLOY_CMD
          
          # 验证部署结果
          echo "🔍 验证部署结果..."
          node -e "
            const mysql = require('mysql2/promise');
            require('dotenv').config();
            
            const config = {
              host: process.env.DB_HOST || 'localhost',
              user: process.env.DB_USER || 'root',
              password: process.env.DB_PASSWORD || '',
              database: process.env.DB_NAME || 'nest_db',
              charset: 'utf8mb4',
              port: process.env.DB_PORT || 3306
            };
            
            mysql.createConnection(config)
              .then(connection => {
                return connection.execute('SHOW TABLES')
                  .then(([rows]) => {
                    console.log('📊 数据库表数量:', rows.length);
                    console.log('📋 表列表:');
                    rows.forEach(row => {
                      console.log('  -', Object.values(row)[0]);
                    });
                    return connection.end();
                  });
              })
              .catch(error => {
                console.error('❌ 验证失败:', error.message);
                process.exit(1);
              });
          "
          
          echo "🎉 增量部署完成！"
          echo "🌐 数据库地址: $DB_HOST:$DB_PORT"
          echo "📊 数据库名称: $DB_NAME"
          echo "🔧 部署类型: incremental"

    - name: 🔄 重启应用
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        key: ${{ secrets.ALIYUN_SSH_KEY }}
        port: ${{ secrets.ALIYUN_PORT || '22' }}
        script: |
          echo "🔄 检查是否需要重启应用..."
          
          # 检查是否有应用需要重启
          if command -v pm2 &> /dev/null; then
            echo "🔄 重启 PM2 应用..."
            pm2 restart all || echo "PM2 重启失败或无应用运行"
          fi
          
          if command -v docker-compose &> /dev/null || command -v docker &> /dev/null; then
            echo "🔄 重启 Docker 容器..."
            docker-compose restart 2>/dev/null || docker compose restart 2>/dev/null || echo "Docker Compose 重启失败或无容器运行"
          fi
          
          echo "✅ 应用重启检查完成"

    - name: 🧹 清理临时文件
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        key: ${{ secrets.ALIYUN_SSH_KEY }}
        port: ${{ secrets.ALIYUN_PORT || '22' }}
        script: |
          echo "🧹 清理临时文件..."
          rm -rf /tmp/*
          echo "✅ 清理完成" 