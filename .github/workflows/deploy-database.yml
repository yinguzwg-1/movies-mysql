name: 🚀 数据库部署到阿里云

on:
  push:
    branches: [ main, master ]
    paths:
      - 'database.sql'
      - 'src/**'
      - '.github/workflows/deploy-database.yml'
  workflow_dispatch:
    inputs:
      deploy_type:
        description: '部署类型'
        required: true
        default: 'incremental'
        type: choice
        options:
          - incremental
          - full
      source_env:
        description: '源环境'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - test
          - staging
          - production
      target_env:
        description: '目标环境'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - test
          - staging
          - production
      database_file:
        description: '数据库文件路径（仅用于完整部署）'
        required: false
        default: 'database.sql'

jobs:
  deploy-database:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🟢 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 安装依赖
      run: npm install

    - name: 🔍 检查部署类型
      run: |
        DEPLOY_TYPE="${{ github.event.inputs.deploy_type || 'incremental' }}"
        SOURCE_ENV="${{ github.event.inputs.source_env || 'development' }}"
        TARGET_ENV="${{ github.event.inputs.target_env || 'production' }}"
        
        echo "🚀 部署类型: $DEPLOY_TYPE"
        echo "📤 源环境: $SOURCE_ENV"
        echo "📥 目标环境: $TARGET_ENV"
        
        if [ "$DEPLOY_TYPE" = "full" ]; then
          DB_FILE="${{ github.event.inputs.database_file || 'database.sql' }}"
          if [ ! -f "$DB_FILE" ]; then
            echo "❌ 数据库文件不存在: $DB_FILE"
            exit 1
          fi
          echo "✅ 找到数据库文件: $DB_FILE"
          ls -la "$DB_FILE"
        fi

    - name: 🚀 部署到阿里云服务器
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        key: ${{ secrets.ALIYUN_SSH_KEY }}
        port: ${{ secrets.ALIYUN_PORT || '22' }}
        command_timeout: "600s"
        script: |
          echo "🚀 开始部署数据库到阿里云服务器..."
          echo "📦 部署类型: ${{ github.event.inputs.deploy_type || 'incremental' }}"
          echo "📤 源环境: ${{ github.event.inputs.source_env || 'development' }}"
          echo "📥 目标环境: ${{ github.event.inputs.target_env || 'production' }}"
          
          # 检查 Node.js 是否安装
          if ! command -v node &> /dev/null; then
            echo "📦 安装 Node.js..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
          else
            echo "✅ Node.js 已安装: $(node --version)"
          fi
          
          # 检查 MySQL 是否安装
          if ! command -v mysql &> /dev/null; then
            echo "📦 安装 MySQL..."
            sudo apt-get update
            sudo apt-get install -y mysql-server
            sudo systemctl start mysql
            sudo systemctl enable mysql
          else
            echo "✅ MySQL 已安装"
            sudo systemctl start mysql || true
          fi
          
          # 检查 MySQL 服务状态
          echo "🔍 MySQL 服务状态:"
          sudo systemctl status mysql --no-pager -l
          
          # 创建数据库用户（如果不存在）
          echo "🔧 配置数据库用户..."
          sudo mysql -e "CREATE USER IF NOT EXISTS '${{ secrets.DB_USER }}'@'localhost' IDENTIFIED BY '${{ secrets.DB_PASSWORD }}';" || true
          sudo mysql -e "GRANT ALL PRIVILEGES ON *.* TO '${{ secrets.DB_USER }}'@'localhost' WITH GRANT OPTION;" || true
          sudo mysql -e "FLUSH PRIVILEGES;" || true
          
          # 创建数据库（如果不存在）
          echo "📊 创建数据库..."
          sudo mysql -e "CREATE DATABASE IF NOT EXISTS \`${{ secrets.DB_NAME }}\`;" || true
          
          # 显示所有数据库
          echo "🔍 当前所有数据库:"
          sudo mysql -e "SHOW DATABASES;"
          
          echo "✅ 数据库准备完成"

    - name: 📤 上传项目文件
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        key: ${{ secrets.ALIYUN_SSH_KEY }}
        port: ${{ secrets.ALIYUN_PORT || '22' }}
        source: "./"
        target: "/tmp/"

    - name: 🔄 执行部署
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        key: ${{ secrets.ALIYUN_SSH_KEY }}
        port: ${{ secrets.ALIYUN_PORT || '22' }}
        command_timeout: "600s"
        script: |
          echo "🔄 执行数据库部署..."
          
          DEPLOY_TYPE="${{ github.event.inputs.deploy_type || 'incremental' }}"
          SOURCE_ENV="${{ github.event.inputs.source_env || 'development' }}"
          TARGET_ENV="${{ github.event.inputs.target_env || 'production' }}"
          
          # 进入项目目录
          cd /tmp
          
          # 安装依赖
          echo "📦 安装项目依赖..."
          npm install
          
          # 设置环境变量
          export DB_HOST="localhost"
          export DB_USER="${{ secrets.DB_USER }}"
          export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          export DB_NAME="${{ secrets.DB_NAME }}"
          
          # 根据部署类型执行不同的命令
          if [ "$DEPLOY_TYPE" = "incremental" ]; then
            echo "🔄 执行增量部署: $SOURCE_ENV -> $TARGET_ENV"
            
            # 创建配置文件
            cat > src/db-config.js << 'EOF'
            const configs = {
              development: {
                host: process.env.DB_HOST || 'localhost',
                user: process.env.DB_USER || 'root',
                password: process.env.DB_PASSWORD || 'password',
                database: process.env.DB_NAME || 'nest_db',
                charset: 'utf8mb4',
                port: process.env.DB_PORT || 3306
              },
              test: {
                host: process.env.DB_HOST || 'localhost',
                user: process.env.DB_USER || 'root',
                password: process.env.DB_PASSWORD || 'password',
                database: process.env.DB_NAME || 'nest_db_test',
                charset: 'utf8mb4',
                port: process.env.DB_PORT || 3306
              },
              staging: {
                host: process.env.DB_HOST || 'localhost',
                user: process.env.DB_USER || 'root',
                password: process.env.DB_PASSWORD || 'password',
                database: process.env.DB_NAME || 'nest_db_staging',
                charset: 'utf8mb4',
                port: process.env.DB_PORT || 3306
              },
              production: {
                host: process.env.DB_HOST || 'localhost',
                user: process.env.DB_USER || 'root',
                password: process.env.DB_PASSWORD || 'password',
                database: process.env.DB_NAME || 'nest_db_prod',
                charset: 'utf8mb4',
                port: process.env.DB_PORT || 3306
              }
            };
            
            function getConfig(environment = 'development') {
              const config = configs[environment];
              if (!config) {
                throw new Error(`未知的环境配置: ${environment}`);
              }
              return config;
            }
            
            function getAvailableEnvironments() {
              return Object.keys(configs);
            }
            
            function validateConfig(config) {
              const required = ['host', 'user', 'password', 'database'];
              for (const field of required) {
                if (!config[field]) {
                  throw new Error(`缺少必需的配置字段: ${field}`);
                }
              }
              return true;
            }
            
            module.exports = {
              getConfig,
              getAvailableEnvironments,
              validateConfig,
              configs
            };
            EOF
            
            # 执行增量部署
            node src/incremental-deploy.js "$SOURCE_ENV" "$TARGET_ENV" --execute
            
          elif [ "$DEPLOY_TYPE" = "full" ]; then
            echo "🔄 执行完整部署: $SOURCE_ENV -> $TARGET_ENV"
            
            # 上传数据库文件（如果指定）
            DB_FILE="${{ github.event.inputs.database_file || 'database.sql' }}"
            if [ -f "/tmp/$DB_FILE" ]; then
              echo "📤 使用指定的数据库文件: $DB_FILE"
              cp "/tmp/$DB_FILE" .
            else
              echo "📤 导出源数据库..."
              node src/export.js export -o database.sql
            fi
            
            # 执行完整部署
            chmod +x deploy.sh
            ./deploy.sh full "$SOURCE_ENV" "$TARGET_ENV" -f
            
          else
            echo "❌ 未知的部署类型: $DEPLOY_TYPE"
            exit 1
          fi
          
          # 验证部署结果
          echo "🔍 验证部署结果..."
          node -e "
            const mysql = require('mysql2/promise');
            const config = {
              host: process.env.DB_HOST || 'localhost',
              user: process.env.DB_USER || 'root',
              password: process.env.DB_PASSWORD || 'password',
              database: process.env.DB_NAME || 'nest_db',
              charset: 'utf8mb4'
            };
            
            mysql.createConnection(config)
              .then(connection => {
                return connection.execute('SHOW TABLES')
                  .then(([rows]) => {
                    console.log('📊 数据库表数量:', rows.length);
                    console.log('📋 表列表:');
                    rows.forEach(row => {
                      console.log('  -', Object.values(row)[0]);
                    });
                    return connection.end();
                  });
              })
              .catch(error => {
                console.error('❌ 验证失败:', error.message);
                process.exit(1);
              });
          "
          
          echo "🎉 数据库部署完成！"
          echo "🌐 数据库地址: ${{ secrets.ALIYUN_HOST }}:3306"
          echo "📊 数据库名称: ${{ secrets.DB_NAME }}"
          echo "🔧 部署类型: $DEPLOY_TYPE"

    - name: 🔄 重启应用
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        key: ${{ secrets.ALIYUN_SSH_KEY }}
        port: ${{ secrets.ALIYUN_PORT || '22' }}
        script: |
          echo "🔄 检查是否需要重启应用..."
          
          # 检查是否有应用需要重启
          if command -v pm2 &> /dev/null; then
            echo "🔄 重启 PM2 应用..."
            pm2 restart all || echo "PM2 重启失败或无应用运行"
          fi
          
          if command -v docker-compose &> /dev/null || command -v docker &> /dev/null; then
            echo "🔄 重启 Docker 容器..."
            docker-compose restart 2>/dev/null || docker compose restart 2>/dev/null || echo "Docker Compose 重启失败或无容器运行"
          fi
          
          echo "✅ 应用重启检查完成"

    - name: 🧹 清理临时文件
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        key: ${{ secrets.ALIYUN_SSH_KEY }}
        port: ${{ secrets.ALIYUN_PORT || '22' }}
        script: |
          echo "🧹 清理临时文件..."
          rm -rf /tmp/*
          echo "✅ 清理完成" 