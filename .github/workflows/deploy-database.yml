name: 🚀 数据库部署

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - '.github/workflows/deploy-database.yml'
      - '.env'
  workflow_dispatch:
    inputs:
      deploy_type:
        description: '部署类型'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - incremental
      auto_execute:
        description: '是否自动执行部署'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      output_file:
        description: '输出SQL文件路径（可选）'
        required: false
        default: ''

jobs:
  deploy-database:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🟢 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 安装依赖
      run: npm install

    - name: 🔍 检查部署配置
      run: |
        DEPLOY_TYPE="${{ github.event.inputs.deploy_type || 'full' }}"
        AUTO_EXECUTE="${{ github.event.inputs.auto_execute || 'true' }}"
        OUTPUT_FILE="${{ github.event.inputs.output_file || '' }}"
        
        echo "🚀 部署配置:"
        echo "📤 部署类型: $DEPLOY_TYPE"
        echo "📤 自动执行: $AUTO_EXECUTE"
        if [ -n "$OUTPUT_FILE" ]; then
          echo "📥 输出文件: $OUTPUT_FILE"
        fi

    - name: 🚀 部署到阿里云服务器
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        key: ${{ secrets.ALIYUN_SSH_KEY }}
        port: ${{ secrets.ALIYUN_PORT || '22' }}
        command_timeout: "600s"
        script: |
          echo "🚀 开始增量部署数据库到阿里云服务器..."
          
          # 检查 Node.js 是否安装
          if ! command -v node &> /dev/null; then
            echo "📦 安装 Node.js..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
          else
            echo "✅ Node.js 已安装: $(node --version)"
          fi
          
          # 检查 MySQL 是否安装
          if ! command -v mysql &> /dev/null; then
            echo "📦 安装 MySQL..."
            sudo apt-get update
            sudo apt-get install -y mysql-server
            sudo systemctl start mysql
            sudo systemctl enable mysql
          else
            echo "✅ MySQL 已安装"
            sudo systemctl start mysql || true
          fi
          
          # 检查 MySQL 服务状态
          echo "🔍 MySQL 服务状态:"
          sudo systemctl status mysql --no-pager -l
          
          echo "✅ 服务器环境准备完成"

    - name: 📤 上传项目文件
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        key: ${{ secrets.ALIYUN_SSH_KEY }}
        port: ${{ secrets.ALIYUN_PORT || '22' }}
        source: "./"
        target: "/tmp/"

    - name: 🔄 执行部署
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        key: ${{ secrets.ALIYUN_SSH_KEY }}
        port: ${{ secrets.ALIYUN_PORT || '22' }}
        command_timeout: "600s"
        script: |
          echo "🔄 执行部署..."
          
          DEPLOY_TYPE="${{ github.event.inputs.deploy_type || 'full' }}"
          AUTO_EXECUTE="${{ github.event.inputs.auto_execute || 'true' }}"
          OUTPUT_FILE="${{ github.event.inputs.output_file || '' }}"
          
          # 进入项目目录
          cd /tmp
          
          # 安装依赖
          echo "📦 安装项目依赖..."
          npm install
          
          # 使用GitHub Secrets配置数据库连接
          echo "🔍 使用GitHub Secrets配置数据库连接"
          
          # 设置环境变量
          export DB_HOST="${{ secrets.DB_HOST }}"
          export DB_USER="${{ secrets.DB_USER }}"
          export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          export DB_NAME="${{ secrets.DB_NAME }}"
          export DB_PORT="${{ secrets.DB_PORT || '3306' }}"
          
          # 检查必要的环境变量是否设置
          if [ -z "$DB_HOST" ] || [ -z "$DB_USER" ] || [ -z "$DB_NAME" ]; then
            echo "❌ 错误：缺少必要的数据库配置"
            echo "请确保在GitHub Secrets中配置了以下变量："
            echo "  - DB_HOST"
            echo "  - DB_USER" 
            echo "  - DB_NAME"
            exit 1
          fi
          
          echo "🔍 环境变量检查:"
          echo "   DB_HOST: $DB_HOST"
          echo "   DB_USER: $DB_USER"
          echo "   DB_PASSWORD: $DB_PASSWORD"
          echo "   DB_NAME: $DB_NAME"
          echo "   DB_PORT: $DB_PORT"
          
          # 根据部署类型执行不同的命令
          if [ "$DEPLOY_TYPE" = "full" ]; then
            echo "🔄 执行完整部署..."
            
            # 检查database.sql文件是否存在
            if [ -f "database.sql" ]; then
              echo "✅ 找到database.sql文件，执行完整部署"
              
              # 使用 Node.js 脚本处理 SQL 文件
              echo "📝 处理 SQL 文件以支持已存在的表..."
              node src/process-sql.js database.sql database_safe.sql
              
              if [ $? -eq 0 ]; then
                echo "✅ SQL 文件处理成功"
                
                # 执行处理后的SQL文件
                mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASSWORD" -P "$DB_PORT" "$DB_NAME" < database_safe.sql
                
                if [ $? -eq 0 ]; then
                  echo "✅ 完整部署执行成功"
                  echo "📊 已使用 IF NOT EXISTS 和 IGNORE 选项处理重复表和数据"
                else
                  echo "❌ 完整部署执行失败"
                  exit 1
                fi
              else
                echo "❌ SQL 文件处理失败"
                exit 1
              fi
              
              # 清理临时文件
              rm -f database_safe.sql
            else
              echo "❌ 未找到database.sql文件"
              exit 1
            fi
            
          else
            echo "🔄 执行增量部署..."
            
            # 构建增量部署命令
            # 比较 database.sql 文件与生产数据库的差异
            DEPLOY_CMD="node src/incremental-deploy.js production database.sql"
            
            if [ "$AUTO_EXECUTE" = "true" ]; then
              DEPLOY_CMD="$DEPLOY_CMD --execute"
            fi
            
            if [ -n "$OUTPUT_FILE" ]; then
              DEPLOY_CMD="$DEPLOY_CMD -o $OUTPUT_FILE"
            fi
            
            echo "🚀 执行命令: $DEPLOY_CMD"
            $DEPLOY_CMD
          fi
          
          # 检查部署结果
          if [ $? -ne 0 ]; then
            echo "❌ 增量部署执行失败"
            exit 1
          fi
          
          echo "✅ 增量部署执行成功"
          
          # 验证部署结果
          echo "🔍 验证部署结果..."
          node -e "
            const mysql = require('mysql2/promise');
            
            const config = {
              host: '$DB_HOST',
              user: '$DB_USER',
              password: '$DB_PASSWORD',
              database: '$DB_NAME',
              charset: 'utf8mb4',
              port: $DB_PORT
            };
            
            mysql.createConnection(config)
              .then(connection => {
                return connection.execute('SHOW TABLES')
                  .then(([rows]) => {
                    console.log('📊 数据库表数量:', rows.length);
                    console.log('📋 表列表:');
                    rows.forEach(row => {
                      console.log('  -', Object.values(row)[0]);
                    });
                    return connection.end();
                  });
              })
              .catch(error => {
                console.error('❌ 验证失败:', error.message);
                process.exit(1);
              });
          "
          
          echo "🎉 增量部署完成！"
          echo "🌐 数据库地址: $DB_HOST:$DB_PORT"
          echo "📊 数据库名称: $DB_NAME"
          echo "🔧 部署类型: incremental"

    - name: 🔄 重启应用
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        key: ${{ secrets.ALIYUN_SSH_KEY }}
        port: ${{ secrets.ALIYUN_PORT || '22' }}
        script: |
          echo "🔄 检查是否需要重启应用..."
          
          # 检查是否有应用需要重启
          if command -v pm2 &> /dev/null; then
            echo "🔄 重启 PM2 应用..."
            pm2 restart all || echo "PM2 重启失败或无应用运行"
          fi
          
          if command -v docker-compose &> /dev/null || command -v docker &> /dev/null; then
            echo "🔄 重启 Docker 容器..."
            docker-compose restart 2>/dev/null || docker compose restart 2>/dev/null || echo "Docker Compose 重启失败或无容器运行"
          fi
          
          echo "✅ 应用重启检查完成"

    - name: 🧹 清理临时文件
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        key: ${{ secrets.ALIYUN_SSH_KEY }}
        port: ${{ secrets.ALIYUN_PORT || '22' }}
        script: |
          echo "🧹 清理临时文件..."
          rm -rf /tmp/*
          echo "✅ 清理完成" 